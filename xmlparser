#!/usr/bin/python3
import sys
import os
import csv

from bs4 import BeautifulSoup

# global variables
display_keys = True
hosts_only = False
print_only = False
out_sheet = "Results.csv"
output_format = ""
input_sheets = []
usage = ("Usage:" + os.linesep + "  xmlparser <xml input file> [xml input files...] [options]"
         + os.linesep + "    -v, --values:".ljust(25) + "print attribute values only"
         + os.linesep + "    -n, --names:".ljust(25) + "print host names only"
         + os.linesep + "    -p, --print:".ljust(25) + "print without writing to CSV file"
         + os.linesep + "    -o=<file name>:".ljust(25) + "specifies output csv file name"
         + os.linesep + "    -{format}:".ljust(25) + "%h for host name, %p for port, e.g. \'-%h:%p\'")


# main function to handle xml parsing
def main():
    # handles help/usage command
    if len(sys.argv) == 2 and (sys.argv[1] == "--help" or sys.argv[1] == "-h"):
        print(usage)
    # handles program arguments
    elif 1 < len(sys.argv):
        input_sheets.append(sys.argv[1])
        # processes all optional commands
        if len(sys.argv) > 2:
            process_cmd(sys.argv[2:])
        execute_all()
    else:
        print(usage)
        msg = "Invalid number of arguments given: {}".format(len(sys.argv) - 1)
        raise ValueError(msg)


# processes program argument
def process_cmd(args):
    for cmd in args:
        # print usage message
        if cmd == "-h" or cmd == "--help":
            print(usage)
            exit()
        # processes the 'values only' argument
        elif cmd == "-v" or cmd == "--values":
            global display_keys
            display_keys = False
        # processes the 'host names only' argument
        elif cmd == "-n" or cmd == "--names":
            global hosts_only
            hosts_only = True
        # processes argument to print without writing to CSV
        elif cmd == "-p" or cmd == "--print":
            global print_only
            print_only = True
        # processes argument to specify output file name
        elif cmd[:3] == "-o=":
            global out_sheet
            out_sheet = cmd[3:]
        # processes argument for specific output format (e.g. -%h:%p => host:port)
        elif cmd[:1] == "-":
            global output_format
            output_format = cmd[1:]
        # otherwise assume argument is an input xml sheet
        else:
            global input_sheets
            input_sheets.append(cmd)


# executes reading and printing values from all given input files
def execute_all():
    host_list = []
    for input_sheet in input_sheets:
        host_list += execute(input_sheet)
    print_results(host_list)
    print("[{:,} Total Hosts Found]".format(len(host_list)))
    # writes output to csv
    if not print_only:
        with open(out_sheet, 'w', newline='') as output:
            output_sheet = csv.writer(output)
            output_sheet.writerow(["Host", "Port", "TLSv1.2", "TLSv1.1", "TLSv1.0"])
            write_to_csv(host_list, output_sheet)


# executes the xml parsing
def execute(file_input):
    try:
        # opens the file and reads the contents
        with open(file_input) as tls:
            content = tls.read()
            host_list = parse_xml(content)
            print("[{:,} Hosts Found For \"{}\"]".format(len(host_list), file_input))
        return host_list
    except IOError as e:
        print(usage)
        print(e)
        sys.exit(1)


# returns the list of hosts from the given xml content
def parse_xml(content):
    soup = BeautifulSoup(content, 'html.parser')
    host_list_xml = soup.find_all("ssltest")
    host_list = []

    # iterate through and store every host
    for host_xml in host_list_xml:
        host_name = host_xml['host']
        host_port = host_xml['port']
        cipher_list_xml = host_xml.find_all("cipher")
        host = dict()
        host['host'] = host_name
        host['port'] = host_port
        host['ssl_versions'] = set()
        cipher_list_compl = []

        # iterate through and store every cipher tag
        for cipher_xml in cipher_list_xml:
            cipher_indiv = {}
            # iterate through and store every attribute of the cipher tag
            for key in cipher_xml.attrs:
                value = cipher_xml.attrs.get(key)
                cipher_indiv[key] = value
            # check the cipher tag to save the tls version
            if "status" in cipher_indiv and (cipher_indiv["status"] == "preferred" or cipher_indiv["status"] == "accepted"):
                if "sslversion" in cipher_indiv:
                    tls_version = cipher_indiv["sslversion"]
                    host['ssl_versions'].add(tls_version)

            # add each cipher tag to the list of cipher tags
            cipher_list_compl.append(cipher_indiv)
            # add the list of ciphers to the given host
            host['ciphers'] = cipher_list_compl
        # add the host to the list of hosts
        host_list.append(host)
    return host_list


# writes the results of the given host list to a csv file
def write_to_csv(host_list, output_sheet):
    for host in host_list:
        row = [host['host'], host['port']]
        # updates the row information for each tls version
        check_tls(host["ssl_versions"], row, "TLSv1.2")
        check_tls(host["ssl_versions"], row, "TLSv1.1")
        check_tls(host["ssl_versions"], row, "TLSv1.0")
        output_sheet.writerow(row)


# updates the given row string specifying what tls versions are present
def check_tls(tls_list, row, version):
    if version in tls_list:
        row.append("Yes")
    else:
        row.append("No")


# prints the given results to the console
def print_results(host_list):
    for host in host_list:
        # specified output format
        str_format = output_format
        if not output_format == "":
            str_format = replace_modifier(str_format, "host", host['host'])
            str_format = replace_modifier(str_format, "h", host['host'])
            str_format = replace_modifier(str_format, "port", host['port'])
            str_format = replace_modifier(str_format, "p", host['port'])
            print(str_format)
        # default output
        else:
            if not hosts_only:
                print("==" * 40)
            # build the host string
            str_host = host['host']
            if display_keys:
                str_host = "[host]: ".ljust(15) + str_host
            print(str_host)

            if not hosts_only:
                # build the port string
                str_port = host['port']
                if display_keys:
                    str_port = "[port]: ".ljust(15) + str_port
                print(str_port)
                print()

                # build the cipher strings
                for cipher in host['ciphers']:
                    for key, value in cipher.items():
                        str_attr = value
                        if display_keys:
                            str_attr = "[{}]: ".format(key).ljust(15) + str_attr
                        print(str_attr)
                    print()
                print("==" * 40)


# replaces modifiers ('%keyword') in the specified output format to the given val
def replace_modifier(str_format, keyword, val):
    for i in range(0, len(str_format)):
        if str_format[i] == "%":
            if str_format[i + 1:i + len(keyword) + 1] == keyword:
                return str_format[:i] + val + str_format[i + len(keyword) + 1:]
    return str_format


# executes the script
if __name__ == '__main__':
    main()
